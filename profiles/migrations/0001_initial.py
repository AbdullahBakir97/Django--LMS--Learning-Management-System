# Generated by Django 5.0.6 on 2024-06-13 20:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import shortuuidfield.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("activity", "0002_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("companies", "0001_initial"),
        ("followers", "0001_initial"),
        ("jobs", "0001_initial"),
        ("notifications", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "userId",
                    shortuuidfield.fields.ShortUUIDField(
                        blank=True, editable=False, max_length=22
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="users_images/"),
                ),
                (
                    "cover_photo",
                    models.ImageField(blank=True, null=True, upload_to="cover_photos/"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("institution", models.CharField(max_length=255)),
                ("degree", models.CharField(max_length=255)),
                ("field_of_study", models.CharField(max_length=255)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("is_current", models.BooleanField(default=False)),
                (
                    "shares",
                    models.ManyToManyField(
                        blank=True, related_name="education_shares", to="activity.share"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Endorsement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "shares",
                    models.ManyToManyField(
                        blank=True,
                        related_name="endorsement_shares",
                        to="activity.share",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("is_current", models.BooleanField(default=False)),
                (
                    "company",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="employees",
                        to="companies.company",
                    ),
                ),
                (
                    "shares",
                    models.ManyToManyField(
                        blank=True,
                        related_name="experience_shares",
                        to="activity.share",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("proficiency", models.CharField(max_length=50)),
                (
                    "endorsements",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="endorsement_skills",
                        to="profiles.endorsement",
                    ),
                ),
                (
                    "job_applications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="skill_job_applications",
                        to="jobs.jobapplication",
                    ),
                ),
                (
                    "job_listings",
                    models.ManyToManyField(
                        blank=True,
                        related_name="skill_job_listings",
                        to="jobs.joblisting",
                    ),
                ),
                (
                    "notifications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="skill_notifications",
                        to="notifications.notification",
                    ),
                ),
                (
                    "shares",
                    models.ManyToManyField(
                        blank=True, related_name="skill_shares", to="activity.share"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="endorsement",
            name="skill",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="skills_endorsements",
                to="profiles.skill",
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bio", models.TextField(blank=True)),
                ("headline", models.CharField(blank=True, max_length=255)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("is_private", models.BooleanField(default=False)),
                (
                    "joined_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "educations",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="users_educations",
                        to="profiles.education",
                    ),
                ),
                (
                    "endorsements",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="users_endorsements",
                        to="profiles.endorsement",
                    ),
                ),
                (
                    "experiences",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="users_experiences",
                        to="profiles.experience",
                    ),
                ),
                (
                    "follow_requests",
                    models.ManyToManyField(
                        blank=True,
                        related_name="users_follow_requests",
                        to="followers.followrequest",
                    ),
                ),
                (
                    "followers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="users_followers",
                        to="followers.follower",
                    ),
                ),
                (
                    "job_applications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="profile_job_applications",
                        to="jobs.jobapplication",
                    ),
                ),
                (
                    "job_listings",
                    models.ManyToManyField(
                        blank=True,
                        related_name="profile_job_listings",
                        to="jobs.joblisting",
                    ),
                ),
                (
                    "notifications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="profile_notifications",
                        to="notifications.notification",
                    ),
                ),
                (
                    "shares",
                    models.ManyToManyField(
                        blank=True, related_name="users_shares", to="activity.share"
                    ),
                ),
                (
                    "skills",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="users_skills",
                        to="profiles.skill",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="skill",
            name="users",
            field=models.ManyToManyField(
                db_index=True, related_name="user_skills", to="profiles.userprofile"
            ),
        ),
        migrations.AddField(
            model_name="skill",
            name="verified_from",
            field=models.ManyToManyField(
                blank=True,
                related_name="skill_verified_from",
                to="profiles.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="skill",
            name="verified_to",
            field=models.ManyToManyField(
                blank=True, related_name="skill_verified_to", to="profiles.userprofile"
            ),
        ),
        migrations.CreateModel(
            name="Portfolio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("project_name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("project_url", models.URLField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio",
                        to="profiles.userprofile",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experience",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_experiences",
                to="profiles.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="endorsement",
            name="endorsed_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="given_endorsements",
                to="profiles.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="endorsement",
            name="endorsed_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="received_endorsements",
                to="profiles.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="education",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_educations",
                to="profiles.userprofile",
            ),
        ),
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("date_achieved", models.DateField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to="profiles.userprofile",
                    ),
                ),
            ],
        ),
    ]
